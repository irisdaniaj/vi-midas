#!/bin/bash

#SBATCH -D .

#SBATCH --array=0-49%10

#SBATCH --job-name=vimidas

#SBATCH --output=/dss/dsshome1/09/ra64nef3/vi-midas/src/log/vimidas-%A_%a.log

#SBATCH --error=/dss/dsshome1/09/ra64nef3/vi-midas/src/log/vimidas-%A_%a.err

#SBATCH --clusters=serial

#SBATCH --partition=serial_std

#SBATCH --cpus-per-task=1

#SBATCH --mem=8G

#SBATCH --time=3:00:00

#SBATCH --mail-type=NONE

#SBATCH --mail-user=iris.jimenez@campus.lmu.de
 

 

# Activate Conda environment

source /etc/profile.d/modules.sh

source /dss/dsshome1/lxc01/ru98wan2/.conda_init

module load slurm_setup

 

conda activate vim

 

# Debugging: Check if OFFSET is set

if [ -z "$OFFSET" ]; then

  echo "Error: OFFSET is not set!"

  exit 1

fi

 

echo "OFFSET passed to script: $OFFSET"

 

# Ensure directories exist

mkdir -p ../results/hyperparameter/logfile/

mkdir -p ../results/hyperparameter/logs/

 

# Calculate task variables

TASK_ID=$((SLURM_ARRAY_TASK_ID + OFFSET * 10))

ROW_ID=$((TASK_ID / 5))

SEED=$((TASK_ID % 5))

 

# Read parameters from CSV (skip header)

PARAMS_FILE="../results/hyperparameter/hyperparams.csv"

PARAM_LINE=$(sed -n "$((ROW_ID + 2))p" $PARAMS_FILE)  # Skip header row

IFS=',' read -r LAMBDA THETA K <<<"$PARAM_LINE"

 

# Validate parameters

if [ -z "$LAMBDA" ] || [ -z "$THETA" ] || [ -z "$K" ]; then

    echo "Error: Missing or invalid parameter values in CSV for ROW_ID=$ROW_ID"

    echo "PARAM_LINE=$PARAM_LINE"

    exit 1

fi

 

# Fixed arguments

H_PROP=0.1

NSAMPLE_O=200

SID=$SEED

 

# Debugging: Log all variables

echo "SLURM_ARRAY_TASK_ID=$SLURM_ARRAY_TASK_ID"

echo "TASK_ID=$TASK_ID, ROW_ID=$ROW_ID, SEED=$SEED"

echo "Parsed parameters from CSV:"

echo "LAMBDA=$LAMBDA, THETA=$THETA, K=$K"

echo "Arguments to Python script:"

echo "K=$K, SEED=$SEED, LAMBDA=$LAMBDA, THETA=$THETA, H_PROP=$H_PROP, ROW_ID=$ROW_ID, NSAMPLE_O=$NSAMPLE_O, SID=$SID"

 

# Run Python script

OMP_NUM_THREADS=1 python3 hyperparameter_tuning_fit.py $K $SEED $LAMBDA $THETA $H_PROP $ROW_ID $NSAMPLE_O $SID > ../results/hyperparameter/logfile/task_${TASK_ID}.log 2>&1