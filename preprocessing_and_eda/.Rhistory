(Cholesterol / 240) * 1.3)
data$Mortality <- rbinom(n, 1, plogis(log_odds))  # Generate Mortality as a binary variable
data$Mortality <- as.factor(data$Mortality)  # Convert Mortality to a factor
# List of covariates
covariates <- c("Age", "Smoker", "Diabetes", "Hypertension", "BMI", "Exercise", "Cholesterol")
# Function to calculate ORs and 95% CIs
calculate_or <- function(model) {
estimates <- summary(model)$coefficients
odds_ratios <- exp(estimates[-1, 1])
ci_lower <- exp(estimates[-1, 1] - 1.96 * estimates[-1, 2])
ci_upper <- exp(estimates[-1, 1] + 1.96 * estimates[-1, 2])
data.frame(
Covariate = rownames(estimates)[-1],
OR = round(odds_ratios, 2),
`CI Lower` = round(ci_lower, 2),
`CI Upper` = round(ci_upper, 2)
)
}
# Unadjusted models
unadjusted_results <- lapply(covariates, function(var) {
formula <- as.formula(paste("Mortality ~", var))
model <- glm(formula, data = data, family = "binomial")
calculate_or(model)
})
# Combine unadjusted results into a single table
unadjusted_table <- do.call(rbind, unadjusted_results)
colnames(unadjusted_table)[2] <- "Unadjusted OR"  # Rename OR column for clarity
# Adjusted model
adjusted_model <- glm(Mortality ~ ., data = data[, c(covariates, "Mortality")], family = "binomial")
adjusted_table <- calculate_or(adjusted_model)
colnames(adjusted_table)[2] <- "Adjusted OR"  # Rename OR column for clarity
# Combine into a single formatted table
formatted_table <- merge(unadjusted_table[, c("Covariate", "Unadjusted OR")],
adjusted_table[, c("Covariate", "Adjusted OR", "CI Lower", "CI Upper")],
by = "Covariate")
# Add 95% CI column
formatted_table$`95% CI` <- paste0("(", formatted_table$`CI Lower`, "-", formatted_table$`CI Upper`, ")")
formatted_table <- formatted_table[, c("Covariate", "Unadjusted OR", "Adjusted OR", "95% CI")]
# Print the formatted table
print(formatted_table)
set.seed(1212)
# Number of observations
n <- 10000
# Simulate data
data <- data.frame(
Age = rnorm(n, mean = 40, sd = 5),  # Continuous: Age around 40
Smoker = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.7, 0.3)),  # Binary: Non-smoker (0), Smoker (1)
Diabetes = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.8, 0.2)), # Binary: No Diabetes (0), Diabetes (1)
Hypertension = rnorm(n, mean = 120, sd = 15),  # Continuous: Blood pressure
BMI = rnorm(n, mean = 25, sd = 5),  # Continuous: BMI
Exercise = rnorm(n, mean = 3, sd = 1),  # Continuous: Hours of exercise per week
Cholesterol = rnorm(n, mean = 200, sd = 40)  # Continuous: Cholesterol level
)
# Create the binary outcome: Mortality
log_odds <- with(data,
(Age / 50) * 1.2 +
Smoker * 1.3 +
Diabetes * 1.4 +
(Hypertension / 140) * 1.2 +
(BMI / 30) * 1.1 +
(Exercise / 5) * -0.8 +
(Cholesterol / 240) * 1.3)
data$Mortality <- rbinom(n, 1, plogis(log_odds))  # Generate Mortality as a binary variable
data$Mortality <- as.factor(data$Mortality)  # Convert Mortality to a factor
# List of covariates
covariates <- c("Age", "Smoker", "Diabetes", "Hypertension", "BMI", "Exercise", "Cholesterol")
# Function to calculate ORs and 95% CIs
calculate_or <- function(model) {
estimates <- summary(model)$coefficients
covariates <- rownames(estimates)[-1]
odds_ratios <- exp(estimates[-1, 1])
ci_lower <- exp(estimates[-1, 1] - 1.96 * estimates[-1, 2])
ci_upper <- exp(estimates[-1, 1] + 1.96 * estimates[-1, 2])
data.frame(
Covariate = covariates,
OR = round(odds_ratios, 2),
`CI Lower` = round(ci_lower, 2),
`CI Upper` = round(ci_upper, 2)
)
}
# Unadjusted models
unadjusted_results <- lapply(covariates, function(var) {
formula <- as.formula(paste("Mortality ~", var))
model <- glm(formula, data = data, family = "binomial")
calculate_or(model)
})
# Combine unadjusted results into a single table
unadjusted_table <- do.call(rbind, unadjusted_results)
colnames(unadjusted_table)[2] <- "Unadjusted OR"  # Rename OR column for clarity
# Adjusted model
adjusted_model <- glm(Mortality ~ ., data = data[, c(covariates, "Mortality")], family = "binomial")
adjusted_table <- calculate_or(adjusted_model)
colnames(adjusted_table)[2] <- "Adjusted OR"  # Rename OR column for clarity
# Combine unadjusted and adjusted results into a single formatted table
formatted_table <- merge(unadjusted_table[, c("Covariate", "Unadjusted OR")],
adjusted_table[, c("Covariate", "Adjusted OR", "CI Lower", "CI Upper")],
by = "Covariate", all = TRUE)
set.seed(121)
# Number of observations
n <- 10000
# Simulate data
data <- data.frame(
Age = rnorm(n, mean = 40, sd = 5),  # Continuous: Age around 40
Smoker = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.7, 0.3)),  # Binary: Non-smoker (0), Smoker (1)
Diabetes = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.8, 0.2)), # Binary: No Diabetes (0), Diabetes (1)
Hypertension = rnorm(n, mean = 120, sd = 15),  # Continuous: Blood pressure
BMI = rnorm(n, mean = 25, sd = 5),  # Continuous: BMI
Exercise = rnorm(n, mean = 3, sd = 1),  # Continuous: Hours of exercise per week
Cholesterol = rnorm(n, mean = 200, sd = 40)  # Continuous: Cholesterol level
)
# Create the binary outcome: Mortality
log_odds <- with(data,
(Age / 50) * 1.2 +
Smoker * 1.3 +
Diabetes * 1.4 +
(Hypertension / 140) * 1.2 +
(BMI / 30) * 1.1 +
(Exercise / 5) * -0.8 +
(Cholesterol / 240) * 1.3)
data$Mortality <- rbinom(n, 1, plogis(log_odds))  # Generate Mortality as a binary variable
data$Mortality <- as.factor(data$Mortality)  # Convert Mortality to a factor
# List of covariates
covariates <- c("Age", "Smoker", "Diabetes", "Hypertension", "BMI", "Exercise", "Cholesterol")
# Function to calculate ORs and 95% CIs
calculate_or <- function(model) {
estimates <- summary(model)$coefficients
covariates <- rownames(estimates)[-1]
odds_ratios <- exp(estimates[-1, 1])
ci_lower <- exp(estimates[-1, 1] - 1.96 * estimates[-1, 2])
ci_upper <- exp(estimates[-1, 1] + 1.96 * estimates[-1, 2])
data.frame(
Covariate = covariates,
OR = round(odds_ratios, 2),
`CI Lower` = round(ci_lower, 2),
`CI Upper` = round(ci_upper, 2)
)
}
# Unadjusted models
unadjusted_results <- lapply(covariates, function(var) {
formula <- as.formula(paste("Mortality ~", var))
model <- glm(formula, data = data, family = "binomial")
calculate_or(model)
})
# Combine unadjusted results into a single table
unadjusted_table <- do.call(rbind, unadjusted_results)
colnames(unadjusted_table)[2] <- "Unadjusted OR"  # Rename OR column for clarity
# Adjusted model
adjusted_model <- glm(Mortality ~ ., data = data[, c(covariates, "Mortality")], family = "binomial")
adjusted_table <- calculate_or(adjusted_model)
colnames(adjusted_table)[2] <- "Adjusted OR"  # Rename OR column for clarity
# Check if adjusted_table has all expected columns
expected_cols <- c("Covariate", "Adjusted OR", "CI Lower", "CI Upper")
if (!all(expected_cols %in% colnames(adjusted_table))) {
stop("Adjusted table does not have the expected columns!")
}
# Combine unadjusted and adjusted results into a single formatted table
formatted_table <- merge(unadjusted_table[, c("Covariate", "Unadjusted OR")],
adjusted_table[, expected_cols],
by = "Covariate", all = TRUE)
# Add 95% CI column
formatted_table$`95% CI` <- paste0("(", formatted_table$`CI Lower`, "-", formatted_table$`CI Upper`, ")")
formatted_table <- formatted_table[, c("Covariate", "Unadjusted OR", "Adjusted OR", "95% CI")]
# Print the formatted table
print(formatted_table)
set.seed(121121)
# Number of observations
n <- 10000
# Simulate data
data <- data.frame(
Age = rnorm(n, mean = 40, sd = 5),  # Continuous: Age around 40
Smoker = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.7, 0.3)),  # Binary: Non-smoker (0), Smoker (1)
Diabetes = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.8, 0.2)), # Binary: No Diabetes (0), Diabetes (1)
Hypertension = rnorm(n, mean = 120, sd = 15),  # Continuous: Blood pressure
BMI = rnorm(n, mean = 25, sd = 5),  # Continuous: BMI
Exercise = rnorm(n, mean = 3, sd = 1),  # Continuous: Hours of exercise per week
Cholesterol = rnorm(n, mean = 200, sd = 40)  # Continuous: Cholesterol level
)
# Create the binary outcome: Mortality
log_odds <- with(data,
(Age / 50) * 1.2 +
Smoker * 1.3 +
Diabetes * 1.4 +
(Hypertension / 140) * 1.2 +
(BMI / 30) * 1.1 +
(Exercise / 5) * -0.8 +
(Cholesterol / 240) * 1.3)
data$Mortality <- rbinom(n, 1, plogis(log_odds))  # Generate Mortality as a binary variable
data$Mortality <- as.factor(data$Mortality)  # Convert Mortality to a factor
# List of covariates
covariates <- c("Age", "Smoker", "Diabetes", "Hypertension", "BMI", "Exercise", "Cholesterol")
# Function to calculate ORs and 95% CIs
calculate_or <- function(model) {
estimates <- summary(model)$coefficients
covariates <- rownames(estimates)[-1]
odds_ratios <- exp(estimates[-1, 1])
ci_lower <- exp(estimates[-1, 1] - 1.96 * estimates[-1, 2])
ci_upper <- exp(estimates[-1, 1] + 1.96 * estimates[-1, 2])
data.frame(
Covariate = covariates,
OR = round(odds_ratios, 2),
`CI Lower` = round(ci_lower, 2),
`CI Upper` = round(ci_upper, 2)
)
}
# Unadjusted models
unadjusted_results <- lapply(covariates, function(var) {
formula <- as.formula(paste("Mortality ~", var))
model <- glm(formula, data = data, family = "binomial")
calculate_or(model)
})
# Combine unadjusted results into a single table
unadjusted_table <- do.call(rbind, unadjusted_results)
colnames(unadjusted_table)[2] <- "Unadjusted OR"  # Rename OR column for clarity
# Adjusted model
adjusted_model <- glm(Mortality ~ ., data = data[, c(covariates, "Mortality")], family = "binomial")
adjusted_table <- calculate_or(adjusted_model)
colnames(adjusted_table)[2] <- "Adjusted OR"  # Rename OR column for clarity
# Check if adjusted_table has all expected columns
expected_cols <- c("Covariate", "Adjusted OR", "CI Lower", "CI Upper")
if (!all(expected_cols %in% colnames(adjusted_table))) {
stop("Adjusted table does not have the expected columns!")
}
set.seed(1211211)
# Number of observations
n <- 10000
# Simulate data
data <- data.frame(
Age = rnorm(n, mean = 40, sd = 5),  # Continuous: Age around 40
Smoker = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.7, 0.3)),  # Binary: Non-smoker (0), Smoker (1)
Diabetes = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.8, 0.2)), # Binary: No Diabetes (0), Diabetes (1)
Hypertension = rnorm(n, mean = 120, sd = 15),  # Continuous: Blood pressure
BMI = rnorm(n, mean = 25, sd = 5),  # Continuous: BMI
Exercise = rnorm(n, mean = 3, sd = 1),  # Continuous: Hours of exercise per week
Cholesterol = rnorm(n, mean = 200, sd = 40)  # Continuous: Cholesterol level
)
# Create the binary outcome: Mortality
log_odds <- with(data,
(Age / 50) * 1.2 +
Smoker * 1.3 +
Diabetes * 1.4 +
(Hypertension / 140) * 1.2 +
(BMI / 30) * 1.1 +
(Exercise / 5) * -0.8 +
(Cholesterol / 240) * 1.3)
data$Mortality <- rbinom(n, 1, plogis(log_odds))  # Generate Mortality as a binary variable
data$Mortality <- as.factor(data$Mortality)  # Convert Mortality to a factor
# List of covariates
covariates <- c("Age", "Smoker", "Diabetes", "Hypertension", "BMI", "Exercise", "Cholesterol")
# Function to calculate ORs and 95% CIs
calculate_or <- function(model) {
estimates <- summary(model)$coefficients
odds_ratios <- exp(estimates[-1, 1])
ci_lower <- exp(estimates[-1, 1] - 1.96 * estimates[-1, 2])
ci_upper <- exp(estimates[-1, 1] + 1.96 * estimates[-1, 2])
data.frame(
OR = round(odds_ratios, 2),
`CI Lower` = round(ci_lower, 2),
`CI Upper` = round(ci_upper, 2)
)
}
# Calculate unadjusted ORs
unadjusted_results <- lapply(covariates, function(var) {
formula <- as.formula(paste("Mortality ~", var))
model <- glm(formula, data = data, family = "binomial")
calculate_or(model)
})
unadjusted_table <- do.call(rbind, unadjusted_results)
unadjusted_table$Covariate <- covariates  # Add covariate names
unadjusted_table <- unadjusted_table[, c("Covariate", "OR", "CI Lower", "CI Upper")]
set.seed(1331)
# Number of observations
n <- 10000
# Simulate data
data <- data.frame(
Age = rnorm(n, mean = 40, sd = 5),  # Continuous: Age around 40
Smoker = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.7, 0.3)),  # Binary: Non-smoker (0), Smoker (1)
Diabetes = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.8, 0.2)), # Binary: No Diabetes (0), Diabetes (1)
Hypertension = rnorm(n, mean = 120, sd = 15),  # Continuous: Blood pressure
BMI = rnorm(n, mean = 25, sd = 5),  # Continuous: BMI
Exercise = rnorm(n, mean = 3, sd = 1),  # Continuous: Hours of exercise per week
Cholesterol = rnorm(n, mean = 200, sd = 40)  # Continuous: Cholesterol level
)
# Create the binary outcome: Mortality
log_odds <- with(data,
(Age / 50) * 1.2 +
Smoker * 1.3 +
Diabetes * 1.4 +
(Hypertension / 140) * 1.2 +
(BMI / 30) * 1.1 +
(Exercise / 5) * -0.8 +
(Cholesterol / 240) * 1.3)
data$Mortality <- rbinom(n, 1, plogis(log_odds))  # Generate Mortality as a binary variable
data$Mortality <- as.factor(data$Mortality)  # Convert Mortality to a factor
# List of covariates
covariates <- c("Age", "Smoker", "Diabetes", "Hypertension", "BMI", "Exercise", "Cholesterol")
# Function to calculate ORs and 95% CIs
calculate_or <- function(model) {
estimates <- summary(model)$coefficients
odds_ratios <- exp(estimates[-1, 1])
ci_lower <- exp(estimates[-1, 1] - 1.96 * estimates[-1, 2])
ci_upper <- exp(estimates[-1, 1] + 1.96 * estimates[-1, 2])
data.frame(
OR = round(odds_ratios, 2),
`CI Lower` = round(ci_lower, 2),
`CI Upper` = round(ci_upper, 2)
)
}
# Unadjusted models
unadjusted_results <- lapply(covariates, function(var) {
formula <- as.formula(paste("Mortality ~", var))
model <- glm(formula, data = data, family = "binomial")
calculate_or(model)
})
unadjusted_table <- do.call(rbind, unadjusted_results)
unadjusted_table$Covariate <- covariates  # Add covariate names
colnames(unadjusted_table) <- c("Unadjusted OR", "CI Lower", "CI Upper", "Covariate")
# Adjusted model
adjusted_model <- glm(Mortality ~ ., data = data[, c(covariates, "Mortality")], family = "binomial")
adjusted_table <- calculate_or(adjusted_model)
adjusted_table$Covariate <- covariates  # Add covariate names
colnames(adjusted_table) <- c("Adjusted OR", "CI Lower", "CI Upper", "Covariate")
# Combine results into a single table
final_table <- cbind(
Covariate = unadjusted_table$Covariate,
`Unadjusted OR` = unadjusted_table$`Unadjusted OR`,
`Adjusted OR` = adjusted_table$`Adjusted OR`,
`95% CI` = paste0("(", adjusted_table$`CI Lower`, "-", adjusted_table$`CI Upper`, ")")
)
# Print the final table
print(final_table)
# Save the table to a CSV file for formatting in Overleaf
write.csv(final_table, "results_table.csv", row.names = FALSE)
set.seed(1331)
# Number of observations
n <- 10000
# Simulate data
data <- data.frame(
Age = rnorm(n, mean = 40, sd = 5),  # Continuous: Age around 40
Smoker = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.7, 0.3)),  # Binary: Non-smoker (0), Smoker (1)
Diabetes = sample(c(0, 1), size = n, replace = TRUE, prob = c(0.8, 0.2)), # Binary: No Diabetes (0), Diabetes (1)
Hypertension = rnorm(n, mean = 120, sd = 15),  # Continuous: Blood pressure
BMI = rnorm(n, mean = 25, sd = 5),  # Continuous: BMI
Exercise = rnorm(n, mean = 3, sd = 1),  # Continuous: Hours of exercise per week
Cholesterol = rnorm(n, mean = 200, sd = 40)  # Continuous: Cholesterol level
)
# Create the binary outcome: Mortality
log_odds <- with(data,
(Age / 50) * 1.2 +
Smoker * 1.3 +
Diabetes * 1.4 +
(Hypertension / 140) * 1.2 +
(BMI / 30) * 1.1 +
(Exercise / 5) * -0.8 +
(Cholesterol / 240) * 1.3)
data$Mortality <- rbinom(n, 1, plogis(log_odds))  # Generate Mortality as a binary variable
# covariates
covariates <- c("Age", "Smoker", "Diabetes", "Hypertension", "BMI", "Exercise", "Cholesterol")
# calculate ORs and 95% CIs
calculate_or <- function(model) {
estimates <- summary(model)$coefficients
odds_ratios <- exp(estimates[-1, 1])
ci_lower <- exp(estimates[-1, 1] - 1.96 * estimates[-1, 2])
ci_upper <- exp(estimates[-1, 1] + 1.96 * estimates[-1, 2])
data.frame(
OR = round(odds_ratios, 2),
`CI Lower` = round(ci_lower, 2),
`CI Upper` = round(ci_upper, 2)
)
}
# Unadjusted model
unadjusted_results <- lapply(covariates, function(var) {
formula <- as.formula(paste("Mortality ~", var))
model <- glm(formula, data = data, family = "binomial")
calculate_or(model)
})
unadjusted_table <- do.call(rbind, unadjusted_results)
unadjusted_table$Covariate <- covariates  # Add covariate names
colnames(unadjusted_table) <- c("Unadjusted OR", "CI Lower", "CI Upper", "Covariate")
# Adjusted model
adjusted_model <- glm(Mortality ~ ., data = data[, c(covariates, "Mortality")], family = "binomial")
adjusted_table <- calculate_or(adjusted_model)
adjusted_table$Covariate <- covariates  # Add covariate names
colnames(adjusted_table) <- c("Adjusted OR", "CI Lower", "CI Upper", "Covariate")
# Combining results into a single table
final_table <- cbind(
Covariate = unadjusted_table$Covariate,
`Unadjusted OR` = unadjusted_table$`Unadjusted OR`,
`Adjusted OR` = adjusted_table$`Adjusted OR`,
`95% CI` = paste0("(", adjusted_table$`CI Lower`, "-", adjusted_table$`CI Upper`, ")")
)
# Print the final table
print(final_table)
pacman::p_load(
dplyr,
ggplot2,
maps,
viridis,
readr,
here,
stringr,
tidyr,
pheatmap,
ComplexHeatmap,
DT,
knitr,
gridExtra,
ggpubr,
RColorBrewer,
circlize,
tidyverse,
vegan,
dendextend,
circlize()
)
library(here)
pacman::p_load(
dplyr,
ggplot2,
readr,
here,
pheatmap,
ComplexHeatmap,
vegan
)
data_path <- here("data")
results_path <- here("results")
otu <- read_csv(file.path(data_path, "Y1.csv"))
# Set seed for reproducibility
set.seed(1000000)
getwd()
setwd('/User/eeshachitnis/preprocessing_and_eda')
setwd('/Users/eeshachitnis/preprocessing_and_eda')
# Create folders if missing
dir.create("data", showWarnings = FALSE)
dir.create("results", showWarnings = FALSE)
# Load/install required packages
packages <- c(
"dplyr", "ggplot2", "tidyverse", "tidyr", "vegan",
"stringr", "circlize", "here", "viridis", "readr", "RColorBrewer"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
}
# Set paths
data_path <- "data"
results_path <- "results"
# Load data
motu <- read_csv(file.path(data_path, "motu_filtered.csv"))
environmental <- read_csv(file.path(data_path, "geochemical.csv"))
Z <- read_csv(file.path(data_path, "Z.csv"))
# Drop unwanted OTU column if present
motu <- motu[, !names(motu) %in% c("...1", "otu23987")]
# Clean and merge Z
Z_clean <- Z %>%
rename(biome = pelagicBiome_) %>%
select(id, biome)
# Merge with environmental data
env <- left_join(environmental, Z_clean, by = "id")
# Clean ocean region if needed
env$OceanRegionClean <- sub(".*\\] (.*?) \\(.*", "\\1", env$Ocean.region)
# Merge with OTU table
merged <- inner_join(env, motu, by = "id")
# Identify OTU columns
motu_cols <- grep("^otu", names(merged), value = TRUE)
# Calculate richness (count of non-zero OTUs per sample)
merged$richness <- rowSums(merged[, motu_cols] > 0, na.rm = TRUE)
# Normalize OTU table (relative abundance)
otu_table <- otu_table[rowSums(otu_table) > 0, ]
# Calculate Shannon and Evenness
otu_table <- merged[, motu_cols]
merged$shannon <- diversity(otu_table, index = "shannon")
merged$evenness <- ifelse(merged$richness > 0,
merged$shannon / log(merged$richness),
NA)
# Normalize OTU table (relative abundance)
otu_table <- otu_table[rowSums(otu_table) > 0, ]
otu_relabund <- sweep(otu_table, 1, rowSums(otu_table), "/")
# Bray-Curtis distance and NMDS
bray_dist <- vegdist(otu_relabund, method = "bray")
nmds <- metaMDS(bray_dist, k = 2, trymax = 100)
nmds_scores <- as.data.frame(scores(nmds))
# Add metadata to NMDS results
nmds_scores$polar <- merged$polar
nmds_scores$biome <- merged$biome
nmds_scores$Layer <- merged$Layer
# Define shared color palette (for both Layer and Biome)
shared_colors <- brewer.pal(4, "Set2")
# NMDS plot by Layer
nmds_plot_layer <- ggplot(nmds_scores, aes(x = NMDS1, y = NMDS2, color = Layer, shape = polar)) +
geom_point(size = 3, alpha = 0.7) +
scale_color_manual(values = shared_colors) +
theme_minimal()
ggsave(file.path(results_path, "nmds_motu_layer.jpeg"),
plot = nmds_plot_layer, width = 10, height = 6, dpi = 300, units = "in")
# PERMANOVA by Layer
adonis_result <- adonis2(bray_dist ~ polar + Layer, data = merged, permutations = 999)
print(adonis_result)
# NMDS plot by Biome
nmds_plot_biome <- ggplot(nmds_scores, aes(x = NMDS1, y = NMDS2, color = biome, shape = polar)) +
geom_point(size = 3, alpha = 0.7) +
scale_color_manual(values = shared_colors) +
theme_minimal()
ggsave(file.path(results_path, "nmds_motu_biome.jpeg"),
plot = nmds_plot_biome, width = 10, height = 6, dpi = 300, units = "in")
# PERMANOVA by Biome
adonis_biome <- adonis2(bray_dist ~ polar + biome, data = merged, permutations = 999)
print(adonis_biome)
zero_otu_samples <- merged$id[rowSums(otu_table) == 0]
print(zero_otu_samples)
